// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ===== USER MANAGEMENT =====

model User {
  id            String    @id @default(cuid())
  clerkId       String    @unique
  spotifyId     String?   @unique
  email         String    @unique
  displayName   String
  profileImage  String?
  country       String?
  product       String?   // Spotify subscription type (premium/free)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  playlists     Playlist[]
  activities    Activity[]
  friends       Friend[]   @relation("UserFriends")
  friendsOf     Friend[]   @relation("FriendOf")
  sessions      Session[]
  listeningHistory ListeningHistory[]
  sessionParticipants SessionParticipant[]

  @@map("users")
}

// ===== MUSIC MANAGEMENT =====

model Playlist {
  id          String   @id @default(cuid())
  spotifyId   String   @unique
  name        String
  description String?
  imageUrl    String?
  isPublic    Boolean  @default(false)
  isCollaborative Boolean @default(false)
  ownerId     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  owner       User     @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  tracks      PlaylistTrack[]
  sessions    Session[]

  @@map("playlists")
}

model Track {
  id          String   @id @default(cuid())
  spotifyId   String   @unique
  name        String
  artist      String
  album       String?
  albumImage  String?
  duration    Int      // in milliseconds
  previewUrl  String?
  externalUrl String?
  createdAt   DateTime @default(now())

  // Relations
  playlistTracks PlaylistTrack[]
  listeningHistory ListeningHistory[]
  sessions    Session[] // Current track in sessions

  @@map("tracks")
}

model PlaylistTrack {
  id          String   @id @default(cuid())
  playlistId  String
  trackId     String
  position    Int      // Position in playlist
  addedAt     DateTime @default(now())
  addedBy     String?  // User ID who added the track

  // Relations
  playlist    Playlist @relation(fields: [playlistId], references: [id], onDelete: Cascade)
  track       Track    @relation(fields: [trackId], references: [id], onDelete: Cascade)

  @@unique([playlistId, trackId])
  @@map("playlist_tracks")
}

// ===== SOCIAL FEATURES =====

model Activity {
  id        String   @id @default(cuid())
  userId    String
  type      ActivityType
  data      Json     // Flexible data storage for different activity types
  createdAt DateTime @default(now())

  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("activities")
}

model Friend {
  id        String   @id @default(cuid())
  userId    String
  friendId  String
  status    FriendStatus @default(PENDING)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user      User     @relation("UserFriends", fields: [userId], references: [id], onDelete: Cascade)
  friend    User     @relation("FriendOf", fields: [friendId], references: [id], onDelete: Cascade)

  @@unique([userId, friendId])
  @@map("friends")
}

// ===== REAL-TIME SESSIONS =====

model Session {
  id          String   @id @default(cuid())
  name        String
  description String?
  isActive    Boolean  @default(true)
  hostId      String
  playlistId  String?
  currentTrackId String?
  currentPosition Int?  // Position in track (milliseconds)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  host        User     @relation(fields: [hostId], references: [id], onDelete: Cascade)
  playlist    Playlist? @relation(fields: [playlistId], references: [id])
  currentTrack Track?  @relation(fields: [currentTrackId], references: [id])
  participants SessionParticipant[]

  @@map("sessions")
}

model SessionParticipant {
  id        String   @id @default(cuid())
  sessionId String
  userId    String
  joinedAt  DateTime @default(now())
  isActive  Boolean  @default(true)

  // Relations
  session   Session  @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([sessionId, userId])
  @@map("session_participants")
}

// ===== ANALYTICS =====

model ListeningHistory {
  id        String   @id @default(cuid())
  userId    String
  trackId   String
  playedAt  DateTime @default(now())
  duration  Int?     // How long the track was played (milliseconds)
  source    String?  // Where the track was played from (session, playlist, etc.)

  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  track     Track    @relation(fields: [trackId], references: [id], onDelete: Cascade)

  @@map("listening_history")
}

// ===== ENUMS =====

enum ActivityType {
  TRACK_PLAYED
  PLAYLIST_CREATED
  PLAYLIST_SHARED
  FRIEND_ADDED
  SESSION_JOINED
  SESSION_LEFT
  TRACK_LIKED
  TRACK_SHARED
}

enum FriendStatus {
  PENDING
  ACCEPTED
  REJECTED
  BLOCKED
}
